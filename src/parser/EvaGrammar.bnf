%lex

%% 

\/\/.*              %empty
\/\*[\s\S]*?\*\/    %empty
\s+                 %empty

\"[^\"]*\"          STRING

\d+                 NUMBER

[\w\-+*=!<>/]+      SYMBOL

/lex

%{
#include <string>
#include <vector>

enum class ExpType
{
    NUMBER,
    STRING,
    SYMBOL,
    LIST,
};

struct Exp
{
    ExpType type;
    int number;
    std::string string;
    std::vector<Exp> list;

    Exp(int number) : type(ExpType::NUMBER), number(number) {}

    Exp(std::string& strVal)
    {
        if (strVal[0] == '"')
        {
            type = ExpType::STRING;
            string = strVal.substr(1, strVal.size() - 2);
        }
        else
        {
            type = ExpType::SYMBOL;
            string = strVal;
        }
    }

    Exp(std::vector<Exp> list) : type(ExpType::LIST), list(list) {}
};

using Value = Exp;

%}

%% 

Exp
    : Atom
    | List 
    ;

Atom
    : NUMBER { $$ = Exp(std::stoi($1)) }
    | STRING { $$ = Exp($1) }
    | SYMBOL { $$ = Exp($1) }
    ;

List
    : '(' ListEntries ')' { $$ = $2 }
    ;

ListEntries
    : %empty            { $$ = Exp(std::vector<Exp>{}) }
    | ListEntries   Exp { $1.list.push_back($2); $$ = $1 }
    ;

